#
# This is a sample configuration file for the ngIRCd IRC daemon, which must
# be customized to the local preferences and needs.
#
# Comments are started with "#" or ";".
#
# A lot of configuration options in this file start with a ";". You have
# to remove the ";" in front of each variable to actually set a value!
# The disabled variables are shown with example values for completeness only
# and the daemon is using compiled-in default settings.
#
# Use "ngircd --configtest" (see manual page ngircd(8)) to validate that the
# server interprets the configuration file as expected!
#
# Please see ngircd.conf(5) for a complete list of configuration options
# and their descriptions.
#

[Global]
	# The [Global] section of this file is used to define the main
	# configuration of the server, like the server name and the ports
	# on which the server should be listening.
	# These settings depend on your personal preferences, so you should
	# make sure that they correspond to your installation and setup!

	# Server name in the IRC network, must contain at least one dot
	# (".") and be unique in the IRC network. Required!
	Name = {{ ngircd_name }}

	# Information about the server and the administrator, used by the
	# ADMIN command. Not required by server but by RFC!
	AdminInfo1 = {{ ngircd_admininfo1 }}
	AdminInfo2 = {{ ngircd_admininfo2 }}
	AdminEMail = {{ ngircd_adminemail }}

	# Text file which contains the ngIRCd help text. This file is required
	# to display help texts when using the "HELP <cmd>" command.
	HelpFile = {{ ngircd_helpfile }}

	# Info text of the server. This will be shown by WHOIS and
	# LINKS requests for example.
	Info = {{ ngircd_info|join(' ') }}

	# Comma separated list of IP addresses on which the server should
	# listen. Default values are:
	# "0.0.0.0" or (if compiled with IPv6 support) "::,0.0.0.0"
	# so the server listens on all IP addresses of the system by default.
	Listen = {{ ngircd_listen|join(',') }}

	# Text file with the "message of the day" (MOTD). This message will
	# be shown to all users connecting to the server:
	MotdFile = {{ ngircd_motdfile }}

	# A simple Phrase (<256 chars) if you don't want to use a motd file.
	MotdPhrase = "{{ ngircd_motdphrase }}"

	# The name of the IRC network to which this server belongs. This name
	# is optional, should only contain ASCII characters, and can't contain
	# spaces. It is only used to inform clients. The default is empty,
	# so no network name is announced to clients.
	Network = {{ ngircd_network }}

	# Global password for all users needed to connect to the server.
	# (Default: not set)
{% if ngircd_password is defined %}
	Password = {{ ngircd_password }}
{% else %}
	;Password = abc
{% endif %}

	# This tells ngIRCd to write its current process ID to a file.
	# Note that the pidfile is written AFTER chroot and switching the
	# user ID, e.g. the directory the pidfile resides in must be
	# writable by the ngIRCd user and exist in the chroot directory.
{% if ngircd_pidfile is defined %}
	PidFile = {{ ngircd_pidfile }}
{% else %}
	;PidFile = /var/run/ngircd/ngircd.pid
{% endif %}

	# Ports on which the server should listen. There may be more than
	# one port, separated with ",". (Default: 6667)
	Ports = {{ ngircd_ports|join(', ') if ngircd_ports is defined else '6667' }}

	# Group ID under which the ngIRCd should run; you can use the name
	# of the group or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges!
	ServerGID = {{ ngircd_servergid }}

	# User ID under which the server should run; you can use the name
	# of the user or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges! In addition,
	# the configuration and MOTD files must be readable by this user,
	# otherwise RESTART and REHASH won't work!
	ServerUID = {{ ngircd_serveruid }}

[Limits]
	# Define some limits and timeouts for this ngIRCd instance. Default
	# values should be safe, but it is wise to double-check :-)

	# The server tries every <ConnectRetry> seconds to establish a link
	# to not yet (or no longer) connected servers.
	ConnectRetry = {{ ngircd_connectretry if ngircd_connectretry is defined else '60' }}

	# Number of seconds after which the whole daemon should shutdown when
	# no connections are left active after handling at least one client
	# (0: never, which is the default).
	# This can be useful for testing or when ngIRCd is started using
	# "socket activation" with systemd(8), for example.
	IdleTimeout = {{ ngircd_idletimeout if ngircd_idletimeout is defined else '0' }}

	# Maximum number of simultaneous in- and outbound connections the
	# server is allowed to accept (0: unlimited):
	MaxConnections = {{ ngircd_maxconnections if ngircd_maxconnections is defined else '0' }}

	# Maximum number of simultaneous connections from a single IP address
	# the server will accept (0: unlimited):
	MaxConnectionsIP = {{ ngircd_maxconnectionsip if ngircd_maxconnectionsip is defined else '5' }}

	# Maximum number of channels a user can be member of (0: no limit):
	MaxJoines = {{ ngircd_maxjoins if ngircd_maxjoins is defined else '10' }}

	# Maximum length of an user nickname (Default: 9, as in RFC 2812).
	# Please note that all servers in an IRC network MUST use the same
	# maximum nickname length!
	MaxNickLength = {{ ngircd_maxnicklength if ngircd_maxnicklength is defined else '9' }}

	# Maximum number of channels returned in response to a /list
	# command (0: unlimited):
	MaxListSize = {{ ngircd_maxlistsize if ngircd_maxlistsize is defined else '100' }}

	# After <PingTimeout> seconds of inactivity the server will send a
	# PING to the peer to test whether it is alive or not.
	PingTimeout = {{ ngircd_pingtimeout if ngircd_pingtimeout is defined else '120' }}

	# If a client fails to answer a PING with a PONG within <PongTimeout>
	# seconds, it will be disconnected by the server.
	PongTimeout = {{ ngircd_pongtimeout if ngircd_pongtimeout is defined else '20' }}

[Options]
	# Optional features and configuration options to further tweak the
	# behavior of ngIRCd. If you want to get started quickly, you most
	# probably don't have to make changes here -- they are all optional.

	# List of allowed channel types (channel prefixes) for newly created
	# channels on the local server. By default, all supported channel
	# types are allowed. Set this variable to the empty string to disallow
	# creation of new channels by local clients at all.
	AllowedChannelTypes = {{ ngircd_allowedchanneltypes if ngircd_allowedchanneltypes is defined else '#&+' }}

	# Are remote IRC operators allowed to control this server, e.g.
	# use commands like CONNECT, SQUIT, DIE, ...?
	AllowRemoteOper = {{ 'yes' if ngircd_allowremoteoper is defined and ngircd_allowremoteoper else 'no' }}

	# A directory to chroot in when everything is initialized. It
	# doesn't need to be populated if ngIRCd is compiled as a static
	# binary. By default ngIRCd won't use the chroot() feature.
	# ATTENTION: For this to work the server must have been started
	# with root privileges!
{% if ngircd_chrootdir is defined %}
	ChrootDir = {{ ngircd_chrootdir }}
{% else %}
	;ChrootDir = /var/empty
{% endif %}

	# Set this hostname for every client instead of the real one.
	# Use %x to add the hashed value of the original hostname.
{% if ngircd_cloakhost is defined %}
	CloakHost = {{ ngircd_cloakhost }}
{% else %}
	;CloakHost = cloaked.host
{% endif %}

	# Use this hostname for hostname cloaking on clients that have the
	# user mode "+x" set, instead of the name of the server.
	# Use %x to add the hashed value of the original hostname.
{% if ngircd_cloakhostmodex is defined %}
	CloakHostModeX = {{ ngircd_cloakhostmodex }}
{% else %}
	;CloakHostModeX = cloaked.user
{% endif %}

	# The Salt for cloaked hostname hashing. When undefined a random
	# hash is generated after each server start.
{% if ngircd_cloakhostsalt is defined %}
	CloakHostSalt = {{ ngircd_cloakhostsalt }}
{% else %}
	;CloakHostSalt = abcdefghijklmnopqrstuvwxyz
{% endif %}

	# Set every clients' user name to their nickname
{% if ngircd_cloakusertonick is defined %}
{%   if ngircd_cloakusertonick %}
	CloakUserToNick = yes
{%   else %}
	CloakUserToNick = no
{%   endif %}
{% else %}
	;CloakUserToNick = yes
{% endif %}

	# Try to connect to other IRC servers using IPv4 and IPv6, if possible.
	ConnectIPv6 = {{ 'yes' if ngircd_connectipv6 is defined and ngircd_connectipv6 else 'no' }}
	ConnectIPv4 = {{ 'yes' if ngircd_connectipv4 is defined and ngircd_connectipv4 else 'no' }}

	# Default user mode(s) to set on new local clients. Please note that
	# only modes can be set that the client could set using regular MODE
	# commands, you can't set "a" (away) for example! Default: none.
{% if ngircd_defaultusermodes is defined %}
	DefaultUserModes = {{ ngircd_defaultusermodes }}
{% else %}
	;DefaultUserModes = i
{% endif %}

	# Do DNS lookups when a client connects to the server.
	DNS = {{ 'yes' if ngircd_dns is defined and ngircd_dns else 'no' }}

	# Do IDENT lookups if ngIRCd has been compiled with support for it.
	# Users identified using IDENT are registered without the "~" character
	# prepended to their user name.
	Ident = {{ 'yes' if ngircd_ident is defined and ngircd_ident else 'no' }}

	# Directory containing configuration snippets (*.conf), that should
	# be read in after parsing this configuration file.
{% if ngircd_incluedir is defined %}
	IncludeDir = {{ ngircd_incluedir }}
{% else %}
	;IncludeDir = /etc/conf.d
{% endif %}

	# Enhance user privacy slightly (useful for IRC server on TOR or I2P)
	# by censoring some information like idle time, logon time, etc.
	MorePrivacy = {{ 'yes' if ngircd_moreprivacy is defined and ngircd_moreprivacy else 'no' }}

	# Normally ngIRCd doesn't send any messages to a client until it is
	# registered. Enable this option to let the daemon send "NOTICE *"
	# messages to clients while connecting.
	NoticeBeforeRegistration = {{ 'yes' if ngircd_noticebeforeregistration is defined and ngircd_noticebeforeregistration else 'no' }}

	# Should IRC Operators be allowed to use the MODE command even if
	# they are not(!) channel-operators?
	OperCanUseMode = {{ 'yes' if ngircd_opercanusemode is defined and ngircd_opercanusemode else 'no' }}

	# Should IRC Operators get AutoOp (+o) in persistent (+P) channels?
	OperChanPAutoOp = {{ 'no' if ngircd_opercanpautoop is defined and not ngircd_opercanpautoop else 'yes' }}

	# Mask IRC Operator mode requests as if they were coming from the
	# server? (This is a compatibility hack for ircd-irc2 servers)
	OperServerMode = {{ 'yes' if ngircd_operservermode is defined and ngircd_operservermode else 'no' }}

	# Use PAM if ngIRCd has been compiled with support for it.
	# Users identified using PAM are registered without the "~" character
	# prepended to their user name.
	PAM = {{ 'no' if ngircd_pam is defined and not ngircd_pam else 'yes' }}

	# When PAM is enabled, all clients are required to be authenticated
	# using PAM; connecting to the server without successful PAM
	# authentication isn't possible.
	# If this option is set, clients not sending a password are still
	# allowed to connect: they won't become "identified" and keep the "~"
	# character prepended to their supplied user name.
	# Please note: To make some use of this behavior, it most probably
	# isn't useful to enable "Ident", "PAM" and "PAMIsOptional" at the
	# same time, because you wouldn't be able to distinguish between
	# Ident'ified and PAM-authenticated users: both don't have a "~"
	# character prepended to their respective user names!
	PAMIsOptional = {{ 'yes' if ngircd_pamisoptional is defined and ngircd_pamisoptional else 'no' }}

	# Let ngIRCd send an "authentication PING" when a new client connects,
	# and register this client only after receiving the corresponding
	# "PONG" reply.
	RequireAuthPing = {{ 'yes' if ngircd_requireauthping is defined and ngircd_requireauthping else 'no' }}

	# Silently drop all incoming CTCP requests.
	ScrubCTCP = {{ 'yes' if ngircd_scrubctcp is defined and ngircd_scrubctcp else 'no' }}

	# Syslog "facility" to which ngIRCd should send log messages.
	# Possible values are system dependent, but most probably auth, daemon,
	# user and local1 through local7 are possible values; see syslog(3).
	# Default is "local5" for historical reasons, you probably want to
	# change this to "daemon", for example.
	SyslogFacility = {{ ngircd_syslogfacility if ngircd_syslogfacility is defined else 'local5' }}

	# Password required for using the WEBIRC command used by some
	# Web-to-IRC gateways. If not set/empty, the WEBIRC command can't
	# be used. (Default: not set)
{% if ngircd_webircpassword is defined %}
	WebircPassword = {{ ngircd_webircpassword }}
{% else %}
	;WebircPassword = xyz
{% endif %}

;[SSL]
	# SSL-related configuration options. Please note that this section
	# is only available when ngIRCd is compiled with support for SSL!
	# So don't forget to remove the ";" above if this is the case ...

	# SSL Server Key Certificate
{% if ngircd_certfile is defined %}
	CertFile = {{ ngircd_certfile }}
{% else %}
	;CertFile = /etc/ssl/server-cert.pem
{% endif %}

	# Select cipher suites allowed for SSL/TLS connections. This defaults
	# to HIGH:!aNULL:@STRENGTH (OpenSSL) or SECURE128 (GnuTLS).
	# See 'man 1ssl ciphers' (OpenSSL) or 'man 3 gnutls_priority_init'
	# (GnuTLS) for details.
	# For OpenSSL:
	;CipherList = HIGH:!aNULL:@STRENGTH:!SSLv3
	# For GnuTLS:
	;CipherList = SECURE128:-VERS-SSL3.0
{% if ngircd_cipherlist is defined %}
	CipherList = {{ ngircd_cipherlist|join(':') }}
{% endif %}

	# Diffie-Hellman parameters
{% if ngircd_dhfile is defined %}
	DHFile = {{ ngircd_dhfile }}
{% else %}
	;DHFile = /etc/ssl/dhparams.pem
{% endif %}

	# SSL Server Key
{% if ngircd_keyfile is defined %}
	KeyFile = {{ ngircd_keyfile }}
{% else %}
	;KeyFile = /etc/ssl/server-key.pem
{% endif %}

	# password to decrypt SSLKeyFile (OpenSSL only)
{% if ngircd_keyfilepassword is defined %}
	KeyFilePassword = {{ ngircd_keyfilepassword }}
{% else %}
	;KeyFilePassword = secret
{% endif %}

	# Additional Listen Ports that expect SSL/TLS encrypted connections
{% if ngircd_ssl_ports is defined %}
	Ports = {{ ngircd_ssl_ports|join(', ') }}
{% else %}
	;Ports = 6697, 9999
{% endif %}

{% if ngircd_operators is defined %}
{%   for o in ngircd_operators %}
[Operator]
{%     if o['name'] is defined %}
	Name = {{ o['name'] }}
{%     endif %}
{%     if o['password'] is defined %}
	Password = {{ o['password'] }}
{%     endif %}
{%     if o['mask'] is defined %}
	Mask = {{ o['mask'] }}
{%     endif %}

{%   endfor %}
{% endif %}
[Server]
	# Other servers are configured in [Server] sections. If you
	# configure a port for the connection, then this ngircd tries to
	# connect to to the other server on the given port; if not it waits
	# for the other server to connect.
	# There may be more than one server block, one for each server.
	#
	# Server Groups:
	# The ngIRCd allows "server groups": You can assign an "ID" to every
	# server with which you want this ngIRCd to link. If a server of a
	# group won't answer, the ngIRCd tries to connect to the next server
	# in the given group. But the ngircd never tries to connect to two
	# servers with the same group ID.

	# IRC name of the remote server, must match the "Name" variable in
	# the [Global] section of the other server (when using ngIRCd).
	;Name = irc2.example.net

	# Internet host name or IP address of the peer (only required when
	# this server should establish the connection).
	;Host = connect-to-host.example.net

	# IP address to use as _source_ address for the connection. if
	# unspecified, ngircd will let the operating system pick an address.
	;Bind = 10.0.0.1

	# Port of the server to which the ngIRCd should connect. If you
	# assign no port the ngIRCd waits for incoming connections.
	;Port = 6667

	# Own password for the connection. This password has to be configured
	# as "PeerPassword" on the other server.
	;MyPassword = MySecret

	# Foreign password for this connection. This password has to be
	# configured as "MyPassword" on the other server.
	;PeerPassword = PeerSecret

	# Group of this server (optional)
	;Group = 123

	# Set the "Passive" option to "yes" if you don't want this ngIRCd to
	# connect to the configured peer (same as leaving the "Port" variable
	# empty). The advantage of this option is that you can actually
	# configure a port an use the IRC command CONNECT more easily to
	# manually connect this specific server later.
	;Passive = no

	# Connect to the remote server using TLS/SSL (Default: false)
	;SSLConnect = yes

	# Define a (case insensitive) list of masks matching nicknames that
	# should be treated as IRC services when introduced via this remote
	# server, separated by commas (",").
	# REGULAR SERVERS DON'T NEED this parameter, so leave it empty
	# (which is the default).
	# When you are connecting IRC services which mask as a IRC server
	# and which use "virtual users" to communicate with, for example
	# "NickServ" and "ChanServ", you should set this parameter to
	# something like "*Serv" or "NickServ,ChanServ,XyzServ".
	;ServiceMask = *Serv,Global

[Server]
	# More [Server] sections, if you like ...

{% if ngircd_channels is defined %}
{%   for c in ngircd_channels %}
[Channel]
{%     if c['name'] is defined %}
	Name = {{ c['name'] }}
{%     endif %}
{%     if c['topic'] is defined %}
	Topic = {{ c['topic'] }}
{%     endif %}
{%     if c['modes'] is defined %}
	Modes = {{ c['modes'] }}
{%     endif %}
{%     if c['key'] is defined %}
	Key = {{ c['key'] }}
{%     endif %}
{%     if c['keyfile'] is defined %}
	KeyFile = {{ c['keyfile'] }}
{%     endif %}
{%     if c['maxusers'] is defined %}
	MaxUesrs = {{ c['maxusers'] }}
{%     endif %}

{%   endfor %}
{% endif %}
# -eof-
